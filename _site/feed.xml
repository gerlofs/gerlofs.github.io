<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-03-05T15:13:18+00:00</updated><id>/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Greplike</title><link href="/2021/02/05/grep.html" rel="alternate" type="text/html" title="Greplike" /><published>2021-02-05T00:00:00+00:00</published><updated>2021-02-05T00:00:00+00:00</updated><id>/2021/02/05/grep</id><content type="html" xml:base="/2021/02/05/grep.html">&lt;hr /&gt;

&lt;h2 align=&quot;center&quot;&gt;A pattern-matching file parser and regular expression engine&lt;/h2&gt;
&lt;h3&gt;Weapon of choice:&lt;/h3&gt;
&lt;p&gt;C&lt;/p&gt;
&lt;h3&gt;Adapted from:&lt;/h3&gt;
&lt;p&gt;Greplike is an extension of &lt;a href=&quot;https://www.oreilly.com/library/view/beautiful-code/9780596510046/ch01.html&quot;&gt;Pike’s regular expression matcher &lt;/a&gt; and is, thus, also inspired by &lt;a href=&quot;https://swtch.com/~rsc/regexp/&quot;&gt;Russ Cox’s series on regular expressions&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Summary:&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Greplike&lt;/em&gt; is a rudimentary, toy, pattern-matching tool that can be used, &lt;em&gt;like grep&lt;/em&gt;, for parsing through files to find occurances of a string using literals or a regular expression. Unlike the &lt;em&gt;grep&lt;/em&gt; tool, &lt;em&gt;greplike&lt;/em&gt;
has some limitations including a lesser number of command-line and engine options available. For example: the user cannot invert the search using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt; or ignore case using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-y&lt;/code&gt; 
(greplike is &lt;strong&gt;always&lt;/strong&gt; case-sensitive), and the user may not select a set of regular expressions to use (with &lt;em&gt;grep&lt;/em&gt; this can be done with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt; flags for PCRE and extended sets).
Greplike uses a sub-set of &lt;a href=&quot;https://en.wikibooks.org/wiki/Regular_Expressions/POSIX_Basic_Regular_Expressions&quot;&gt;POSIX Basic Regular Expressions&lt;/a&gt; which does not (currently*&lt;sub&gt;1&lt;/sub&gt;) support the following
meta-characters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;}&lt;/code&gt; (braces) used for matching a preceeding character/group/class &lt;em&gt;n&lt;/em&gt; times.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[^&lt;/code&gt; used for matching characters &lt;strong&gt;not&lt;/strong&gt; within the suffix class, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[^abc]&lt;/code&gt; matches everything besides &lt;em&gt;abc&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;POSIX class categories (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:upper:]&lt;/code&gt; for all uppercase characters).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally greplike does not support metacharacters inside groups of classes (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(a+b+c)+d&lt;/code&gt; is not a valid regular expression in greplike).&lt;/p&gt;

&lt;h3&gt;A quick, shallow dive into regular expression engines&lt;/h3&gt;

&lt;p&gt;If you’re uncertain about what a regular expression is, I recommend reading Friedl’s &lt;em&gt;Mastering Regular Expressions&lt;/em&gt;. Essentially there are two viable ways of parsing and matching a text buffer
using regular expressions. Non-deterministic finite automata (NFA)-based matchers (regex enginers) rely heavily on &lt;em&gt;backtracking&lt;/em&gt;*&lt;sub&gt;2&lt;/sub&gt;&lt;/p&gt;

&lt;h3&gt;Appendix:&lt;/h3&gt;
&lt;p&gt;*&lt;sub&gt;1&lt;/sub&gt; | I, currently, have no plans to keep &lt;em&gt;greplike&lt;/em&gt; up-to-date and implement upon the documented functionality. As stated, &lt;em&gt;greplike&lt;/em&gt; was an exercise in learning about string parsing, regular 
expressions, and finite automata.&lt;/p&gt;

&lt;p&gt;*&lt;sub&gt;2&lt;/sub&gt; | Backtracking is, essentially, a quality that arises in certain types of algorithmic problems such as constraint statisfaction problems (e.g. a sudoku solver) in which a successful
approach is based upon a condition that can sometimes be partially valid (e.g. Friedl presents the expression &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;to(nite|knight|night)&lt;/code&gt; as an example, where testing and removing two of the three 
invalid options is required). A backtracked approach requires a variable to be stored (in this case the regular expression string) that can be reverted-to in a scenario where a partial match
eventually results in being invalid (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tonighz&lt;/code&gt; will not match &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;to(nite|knight|night)&lt;/code&gt; until the very last character check).&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-point-in-rewriting-simplified-versions-of-existing-tools&quot;&gt;What is the point in rewriting simplified versions of existing tools?&lt;/h3&gt;

&lt;p&gt;The goal of this rewrite project is to produce a tool that is robust and &lt;em&gt;at least&lt;/em&gt; faster than matching using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strstr()&lt;/code&gt;, with an end goal to produce results on par with regular expression pattern matching functionality available in interpreted languages such as Perl or Python.&lt;/p&gt;

&lt;h3 id=&quot;what-is-grep&quot;&gt;What is grep?&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Grep&lt;/code&gt; is a pattern matching engine that routes matched lines of text to the standard output. Simply put:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt; prints lines that contain a match for one or more &lt;em&gt;patterns&lt;/em&gt;* [1]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;* Emphasis is mine.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;grep&lt;/em&gt; command reads line from a file into a buffer until it reaches a new-line [2], searching each line for the input pattern and printing those lines back to the user. There is &lt;strong&gt;a lot&lt;/strong&gt; more to grep than this due to the several quadrillion options available (see [1] and [3]), but this is the basics of Unix’s fifteenth most important command [4].&lt;/p&gt;

&lt;h3 id=&quot;what-are-patterns-and-regular-expressions&quot;&gt;What are patterns and regular expressions?&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Patterns&lt;/em&gt; can be literal strings, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep &quot;article&quot; article.md&lt;/code&gt; will match the literal string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;article&lt;/code&gt; against each line and route that line to stdout if it contains an exact match [5], or regular expressions.
Regular expressions (&lt;em&gt;regex&lt;/em&gt; for short) are a type of meta-programming-language consisting of literal strings and special characters that can be used to tell the parsing engine the byte content &lt;strong&gt;and&lt;/strong&gt; conditions to match against.
For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep &quot;l&quot; article.md&lt;/code&gt; will match any line containing the character &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l&lt;/code&gt;, however, if we wanted to only match lines containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l&lt;/code&gt; at the beginning of the line, we could use a regular expression to fulfil this: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep &quot;^l&quot; article.md&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;why-grep&quot;&gt;Why grep?&lt;/h3&gt;

&lt;p&gt;Grep is described by Kernighan as “&lt;em&gt;the classic example of tool-based programming&lt;/em&gt;” in &lt;em&gt;The Practice of Programming&lt;/em&gt;[X]. In the same book, an elegant solution of pattern-matching, with a more minimal subset of metacharacters than that used in grep, is presented (code by Rob Pike [X]). 
Kernighan later (in &lt;em&gt;Beautiful Code&lt;/em&gt; [Y]) went on to applaud Pike’s code and detailed why it was smaller and more pedagogical than the &lt;em&gt;grep&lt;/em&gt; tool and its many variants. I think these points also echo why a recreation of &lt;em&gt;grep&lt;/em&gt; serves as a valuable project in which to learn recursion, pointer arthimetic, and, arguably, the discipline of &lt;em&gt;clean code&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;First, the features are well chosen to be the most useful and to give the most insight into implementation, without any frills. For example, the implementation of the anchored patterns ^ and $ requires only three or four lines, but it shows how to deal with special cases cleanly before handling the general cases uniformly. The closure operation * must be present because it is a fundamental notion in regular expressions and provides the only way to handle patterns of unspecified lengths. But it would add no insight to also provide + and ?, so those are left as exercises.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Second, recursion is a win. This fundamental programming technique almost always leads to smaller, cleaner, and more elegant code than the equivalent written with explicit loops, and that is the case here. The idea of peeling off one matching character from the front of the regular expression and from the text, then recursing for the rest, echoes the recursive structure of the traditional factorial or string length examples, but in a much more interesting and useful setting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Third, this code really uses the underlying language to good effect. Pointers can be misused, of course, but here they are used to create compact expressions that naturally express the extracting of individual characters and advancing to the next character. Array indexing or substrings can achieve the same effect, but in this code, pointers do a better job, especially when coupled with C idioms for autoincrement and implicit conversion of truth values.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Additionally, a &lt;em&gt;grep&lt;/em&gt;-like tool has the potential to teach the programmer a lot about testing. As Kernighan points out:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Regular expressions are rich enough that testing is far from trivial, but small enough that one can quickly write down a substantial collection of tests to be performed mechanically [Y]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s a good few areas to dive in to despite the succinctness of Pike’s original code - the &lt;em&gt;engine&lt;/em&gt; encompasses only 35 lines. The brevity of which allows for many improvements and additional 
features in the form of an expansion of supported metacharacters and command line options, many of which are even noted in the &lt;em&gt;Building on It&lt;/em&gt; section of Kernighan’s revist [Y].&lt;/p&gt;

&lt;h3 id=&quot;the-uninteresting-bit&quot;&gt;The uninteresting bit.&lt;/h3&gt;

&lt;p&gt;( Parse from standard input or a list of files )&lt;/p&gt;

&lt;h3 id=&quot;the-regular-expression-engine&quot;&gt;The regular expression engine.&lt;/h3&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;

&lt;h3 id=&quot;nondeterministic-finite-automata-to-solve-pathological-expressions&quot;&gt;Nondeterministic finite automata to solve pathological expressions&lt;/h3&gt;

&lt;p&gt;When I mentioned earlier in this article that regular expressions were originally designed as a notation for finite automata, you may have mistakenly thought that a restrictive, mathematical process was
originally developed and morphed into a more sophisticated and, more importantly, more efficient system. If you assumed this, sadly, you’re incorrect. Pattern matching techniques in modern systems &lt;em&gt;can&lt;/em&gt; be 
considerably slower in edge cases than the original grep (and preceeding tools created by Thompson) designed and implemented more than 40 years ago [Z]. That’s because the attention to the founding concept behind 
regular expressions was lost in translation somewhere along the line. The idea of finite automata (state machines) provides a way of thinking about regular expression pattern matching in both a deterministic
(DFA, deterministic finite automata) and non-deterministic (NFA, non-deterministic finitie automata) way. Deterministic state machines have a known outcome in each state, we know both where we currently are
and the possible states in which we can end up, inversely, non-deterministic state machines may have multiple edges that a traversable from a given state where a decision cannot be correct as we cannot &lt;em&gt;peek&lt;/em&gt; ahead in the string.&lt;/p&gt;

&lt;p&gt;NFAs and DFAs can be understood visually using a state graph, where circles represent a state, vertices are connected via edges which denote state transitions, and the final state is denoted by a double-walled circle.
The below example (A) shows a DFA for the regular expression &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; - basically, is there an a? If so, we go to the last state, otherwise there’s no match and the check fails. Deterministic state machines are fundamentally easy
to understand once the diagramatic language is known, for a pattern of &lt;em&gt;n&lt;/em&gt; length there may be &lt;em&gt;n&lt;/em&gt;+1 states including the ultimate state. Simply, each item in the regular expression pattern forces through one state to the next 
in the case of a successful match, or produces a failure in the case where there can be no transition from one state to another or there are no more transitions (characters or metacharacters left in the pattern) and we 
are not at the final state. This is codified in Pike’s regex engine, where each conditional check within the recursive functions denotes an edge between each state.&lt;/p&gt;

&lt;p&gt;(A) &lt;img src=&quot;/assets/img/project/grep/basic_machine&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the case of regular exceptions displayed as deterministic state machines, each of the edges is a check against a character in the pattern. Metacharacters do not have their own edge in the same way, rather metacharacters alter the flow of the state
machine, as in the below case (B) where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; metacharacter performs an additional check for &lt;em&gt;b&lt;/em&gt; after a sequence of two successive &lt;em&gt;b&lt;/em&gt; characters, this route puts the state machine back to S&lt;sub&gt;1&lt;/sub&gt; where 
a second &lt;em&gt;b&lt;/em&gt; character is required for a successful check (eliminating strings with an odd number of &lt;em&gt;b&lt;/em&gt; characters: e.g. &lt;em&gt;abbba&lt;/em&gt; and &lt;em&gt;aba&lt;/em&gt;). In a similar way, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; metacharacter provides an optional edge
which will force a move to a different state. In the example below (C) for the pattern &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(a+b)*&lt;/code&gt;, an edge allows a state change from the final state, where we have a match, to a state where we now need a &lt;em&gt;b&lt;/em&gt; character
to reach the final state again.&lt;/p&gt;

&lt;p&gt;(B) &lt;img src=&quot;/assets/img/project/grep/cox_machine_steps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(C) &lt;img src=&quot;/assets/img/project/grep/asterisk_machine&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To make things ever-so-slightly more confusing, DFAs are NFAs and vice-versa.&lt;/p&gt;

&lt;p&gt;Converting regular expression patterns to NFAs…&lt;/p&gt;

&lt;p&gt;Implementing NFA into pattern matching tools such as grep is one of the reasons &lt;em&gt;grep&lt;/em&gt; and associated tools are much longer in code length than Pike’s simplified tool - other reasons account for this too, such as 
a greater offering of metacharacters and functionality that does not conform to Thompson’s construction (?).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://swtch.com/~rsc/regexp/regexp1.html&quot;&gt;Z Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In progress…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Appendix:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/grep/manual/grep.html&quot;&gt;Grep Manual&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The grep command requires the end-of-file character be a new-line, it supplements if one is missing. The fact that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt; is a required character for operation means that you &lt;em&gt;technically&lt;/em&gt; cannot use it as an input pattern (see: 1, above). It &lt;a href=&quot;https://stackoverflow.com/questions/12652568/how-to-give-a-pattern-for-new-line-in-grep&quot;&gt;is possible&lt;/a&gt;, however, to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt; in some scenarios thanks to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-z&lt;/code&gt; option.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www-users.york.ac.uk/~mijp1/teaching/2nd_year_Comp_Lab/guides/grep_awk_sed.pdf&quot;&gt;A decent summary of a few of the more useful options&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.oliverelliott.org/article/computing/ref_unix/&quot;&gt;Says this guy&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This includes matches within words. Sticking with the example, a line containing the world &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;articles&lt;/code&gt; will match as well as a line with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subarticles&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/mastering-regular-expressions/0596528124/&quot;&gt;Mastering Regular Expressions&lt;/a&gt; by Jeffrey Friedl.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Rob Pike’s section on &lt;em&gt;Regex&lt;/em&gt; from &lt;a href=&quot;https://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html&quot;&gt;Beautiful Code&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="unlisted" /><summary type="html"></summary></entry></feed>